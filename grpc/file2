rpc remote procedure call 远程过程调用,一个节点调用另一个节点的进程,就像本地调用一般
本地调用又以函数调用为典型案例
分布式基础(优势,解耦,更加安全可靠)
这样也容易产生各种调用问题




函数调用过程:
1.函数调用的地方,将实参压入这个函数的栈中
2.进入函数,也就是将实参赋值给形参数
3.经过处理,得到个a值,局部变量,也就是return a
4.外部变量获取到函数的返回值,也就是t:=func()





远程过程调用简单来说就是调用远程的函数,也就是运行远程的函数,再返回数据给自己
问题:
1.call id   其实就是远程函数可以调用很多,要用唯一的id来区分,实际上只要唯一可以用来区分函数能实现正确的调用即可
2.数据的反序列化和序列化   得传参,比如protobuf和json一样也是一种数据格式的协议 json不够高性能
3.网络传输





客户端:
1.建立连接 tcp/http
2.将参数等序列化成json字符串
3.发送
4.接受返回的结果
5.反序列化
服务端:
1.监听相应的端口
2.反序列化参数
3.业务逻辑处理
4.序列化
5.返回

序列化和反序列化的协议不一定是json xml/protobuf,甚至自定义数据格式编码

基本上核心就是序列化和反序列化,将这两个抽离出来或者说是的独立"接口",那么语言就无关了

网络连接 tcp或http(也是基于tcp)
http 默认一次性,就是数据返回了就断开,需要重新连接

http2可以保持长连接,兼容http,后续可能使用http2
rpc框架一般使用的是tcp,grpc使用的是http2
可以自己给予tcp封装一个应用层协议



rpc四大部分:客户端 客户端存根 服务端 服务端存根