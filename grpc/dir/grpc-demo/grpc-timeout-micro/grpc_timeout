grpc超时机制
--------------------客户端设置超时机制
ctx,_:=context.WithTimeout(context.Background(),10*time.Second)
然后调用方法时conn.SayHello(ctx,&pb.HelloRequest{})




测试:
服务端在SayHello函数中设置个timesleep一下再return








-------------------微服务架构
从单体中将各个服务拆分出来成微服务,每个服务都有自己的独立,比如数据库等,每个服务之间的调用,或者同意一个api接口或者一个网关来统一调用后边的微服务
服务之间的通信也可以通过一个消息队列来做,实现解耦
独立性:代码独立,服务独立,数据库独立,更新独立
问题:
1.比如a服务依赖b服务的数据,当然你可以直接连b服务的数据库,不建议的,应该通过grpc调用b服务拿到相应的数据
2.如果浏览器直接请求a服务,也就是http请求,那么就意味着a服务同事得直接http服务和暴露给其他微服务调用grpc服务(所以通过一个api来统一管理统一暴露http)



分层微服务架构:
api和rpc之间和rpc和rpc之间通过grpc调用(api层当然也可以多个)
api服务不需要数据库等等,只需要暴露http接口供外部访问即可,实际是去调用rpc服务

api:web层   rpc:service层

注意下层不能调用上层服务,另外下层微服务用的语言或者数据库版本或者代码更新迭代都不限制,独立




-------------------------微服务架构中的问题
1:大量的微服务,大量的ip和端口,还有判断服务是否健康
解决方式:注册中心,就是每次写完一个微服务注册进注册中心(ip port),注册中心会去检测服务是否健康
如果api来调用服务,通过注册中心的服务发现功能,拿到服务的ip和port,去调用微服务
实际上这里就可以过滤出健康的服务还有就是这个为服务如果有多个副本呢(提升性能,但要考虑数据库的数据同步问题),就可以通过服务发现来做负载均衡
(过滤出健康的服务,一定程度的负载均衡)
2:比如要修改数据,阿里云服务访问的token,一个一个改太麻烦了,比如阿里云的数据库服务
解决方式:配置中心,配置更改,rpc要使用的数据库服务信息变更了,通过配置中心获取信息方便


3:服务间的调用很复杂,性能分析优化的时候需要
解决方式:链路追踪(分布式)
4:如果api很多,外部的小程序或者网站访问的时候会很麻烦,要记录很多的ip和端口的(甚至每个不同的api也有多个副本)
解决方式:微服务网关,nginx也行
api的服务信息(ip port)也注册进注册中心,服务网关去配置中心获取到响应api信息,就是服务发现 负载均衡
网关功能:路由,服务发现,熔断,负载均衡,黑名单和白名单