中二点说,软件编程可以分为外功和内功

外功比如go等语言,gin grpc等框架,goland等ide工具(招式)

内功:数据结构 算法 设计模式 架构设计 软件工程



//////////////////////////////设计模式
设计模式是特定环境下解决某类重复问题的一套成功且有效的解决方案

从代码层面上看,设计模式就是让代码更优雅,可重用的代码,代码更清晰易读,加入业务代码不会使原本的代码结构变得混乱
(可读性,可复用性,可扩展性)
GoF+"简单工厂模式"=24个设计模式
创建型模式:创建对象
结构型模式:实现类和对象组合
行为型模式:类和对象怎么交互和怎么职责分配

可以自行设计设计模式


//////////////////////////面向对象设计原则

单一职责原则:类的职责单一,对外只提供一种功能,引起类变化的原因应该只有一个
go-design-pattern/单一职责原则/main.go

开闭原则:类的改动通过增加代码实现,而不是修改原代码
go-design-pattern/开闭原则/main.go

里氏代换原则:任何抽象类(interface)出现的地方,都可以使用他的实现类进行替换

依赖倒转原则:依赖interface而不是依赖实现类,也就是针对接口编程
设计一个系统时,三大模块,抽象层 实现层 业务逻辑层