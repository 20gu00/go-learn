pipeline是一种网络优化,本质上就是客户端缓存了一堆命令一次性发送到服务端上执行,单不能保证事务,好处节省了每次命令的往返时间
针对网络的优化(服务器处理数据时间,网络延迟时间)
如果前后命令有依赖关系就不适合使用pipeline了

Pipeline:
pipeline:=RDB.Pipeline()
incr:=pipeline.Incr("pipeline_counter")  //INCR pipeline_counter
pipeline.Expire("pipeline_counter",time.Hour)  //EXPIRE pipeline_counter 3600
_,err:=pipeline.Exec()
fmt.Println(incr.Val(),err)


redis是单线程的,因此单个命令是原子性(数据的安全性),但来自不同客户端的两个命令可以依次执行,交替执行


保证一个客户端
multi/exec能保证语句之间的命令之间没有其他客户端正在执行命令
TxPipeline或者Pipelined
相当于在redis命令之间加:
MULTI  //开启事务
xxxxx
EXEC


TxPipeline:
txPipeline:=RDB.TxPipeline()
incr:=pipeline.Incr("tx_pipeline_counter")
pipeline.Expire("tx_pipeline_counter",time.Hour)
_,err:=pipeline.Exec()
fmt.Println(incr.Val(),err)

有时还需要搭配watch,监控某个key,在开启MULTI后,到EXEC前,如果有用户对这个可以进行替换更新和删除操作,当用户执行EXEC是返回一个错误,事务会失败,用户根据这个错误判断是重试还是放弃事务

(比如监控一个商品是没有被其他买家购买或者价格没有变化)
