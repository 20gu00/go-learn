处理配置,配置解决方案
go get github.com/sqf13/viper

Viper 是适用于 Go 应用程序（包括 12 因素应用程序）的完整配置解决方案。它被设计成 在应用程序中工作，并且可以处理所有类型的配置需求 和格式。它支持：

设置默认值
从 JSON、TOML、YAML、HCL、envfile 和 Java 属性配置文件中读取
实时观看和重新读取配置文件（可选）  (热加载)
从环境变量读取
从远程配置系统（etcd 或 Consul）读取，并观察更改
从命令行标志读取
从缓冲区读取
设置显式值

构建新式应用程序时，您不想担心 配置文件格式;您想专注于构建出色的软件。 蝰蛇是来帮忙的。

蝰蛇为您执行以下操作：

查找、加载和取消封送 JSON、TOML、YAML、HCL、INI、envfile 或 Java 属性格式的配置文件。
提供一种机制来为不同的配置选项设置默认值。
提供一种机制，用于为通过命令行标志指定的选项设置重写值。
提供别名系统，以便在不破坏现有代码的情况下轻松重命名参数。
轻松区分用户何时提供了与默认值相同的命令行或配置文件。
Viper 使用以下优先顺序。每个项目优先于其下面的项目：

默认提供的配置源
优先级:
显式调用Set
flag
env var
配置文件
key/value存储
默认值
重要：Viper 配置键不区分大小写。 目前正在讨论将其设为可选。

viper.SetDefault("a","b")  //key/value
